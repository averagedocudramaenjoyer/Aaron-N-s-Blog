{
  "hash": "f28851e550c54d52b44e719aba8733ad",
  "result": {
    "markdown": "---\ntitle: \"Grocery Weekly Wrap Up\"\nauthor: \"Aaron Null, Alex Cory, Srika Raja and Harun Celik\"\ndate: \"2023-06-02\"\ncategories: \"Week Three\"\n---\n\n\n## Current Project Objectives\n\nThis week was primarily centered on clarifying the focus of our project, as well as on the retrieval of relevant sources of data. During the first part of the week, our group searched TidyCensus, the USDA and various other internet sources for data that could potentially be useful for whichever type of tool that we and our client decide on.\n\nAfter this, we met with our client and some of his associates at the the research park to discuss the direction of the project. We had them answer various questions on Mentimeter and showed them the list of datasets under consideration. They also gave us numerous suggestions about sources they were familiar with and told us that they would help grant us access to those of which were not immediately available to us.\n\n\n\n\nAs we are wrapping up this week, we have now shifted our focus to compiling our selected data to our repository and filtering through sources that may not be as useful as others. We are continuing to think of ways to optimize this process, as well as remaining open to other sources of data or information that we have yet to discover.\n\n## Works in Progress\n\n## Aaron\n\nThis week has been less coding-centric than the previous week, as many of our efforts have been centered on uncovering useful sources of data. However, I have tried to work through ways to accelerate the time-consuming process of labeling and pushing CSVs of tables of ACS data.\n\nHere is a function that I've been using to speed the process up. It's a data labeler function that takes \"table\", \"year\" and \"geography as arguments and outputs a labelled ACS5 data table by joining labels from the\"load_variables()\" function in TidyCensus by the common variable code on both dataframes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidycensus)\nlibrary(stringr)\nlibrary(readr)\n\n\n\ndata_labeler_Iowa <- function(table, year, geography){\n  df <- tidycensus::get_acs(geography = geography,\n                table = table,\n                state = \"IA\",\n                year = year,\n                survey = \"acs5\")\n  \n  \n  vars <- tidycensus::load_variables(year, \"acs5\")\n  \n  vars <- vars %>%\n    dplyr::filter(stringr::str_detect(name, table))\n  \n  vars <- vars %>% \n    dplyr::rename(variable = name)\n  \n  vars <- vars %>%\n    dplyr::select(variable, label)\n  \n  df2 <- merge(df,vars)\n  \n  df2 %>%\n    dplyr::arrange(GEOID)\n}\n\nMedian_Household_Income_County_2021 <- data_labeler_Iowa(\"B19013\", 2021, \"county\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Median_Household_Income_County_2021)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    variable GEOID                   NAME estimate  moe\n1 B19013_001 19001     Adair County, Iowa    57944 4047\n2 B19013_001 19003     Adams County, Iowa    57981 7853\n3 B19013_001 19005 Allamakee County, Iowa    59461 2644\n4 B19013_001 19007 Appanoose County, Iowa    46900 5645\n5 B19013_001 19009   Audubon County, Iowa    54643 5861\n6 B19013_001 19011    Benton County, Iowa    72334 3626\n                                                                                         label\n1 Estimate!!Median household income in the past 12 months (in 2021 inflation-adjusted dollars)\n2 Estimate!!Median household income in the past 12 months (in 2021 inflation-adjusted dollars)\n3 Estimate!!Median household income in the past 12 months (in 2021 inflation-adjusted dollars)\n4 Estimate!!Median household income in the past 12 months (in 2021 inflation-adjusted dollars)\n5 Estimate!!Median household income in the past 12 months (in 2021 inflation-adjusted dollars)\n6 Estimate!!Median household income in the past 12 months (in 2021 inflation-adjusted dollars)\n```\n:::\n:::\n\n\nBuilding on this, I tried to iterate through all of these arguments by using nested for loops and writing csvs automatically. However, for a reason I don't entirely understand, I haven't gotten it to work the way I should. It's possible that this has to do with the limitations of the API call and its speed within the loop.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearlist <- c(2009, 2012, 2016, 2021)\ngeo_list <- c(\"county\", \"tract\")\nIncome_table_list <- c(\"B19013\", \"B19113\", \"B19202\", \"B19051\", \"B19055\")\nacs_table <- NULL\n\n\nfor(table in Income_table_list)\n\n  for(year in yearlist)\n  \n    for(geography in geo_list)\n    \n      acs_table <- tidycensus::get_acs(geography = geography,\n                                       table = table,\n                                       state = \"IA\",\n                                       year = year,\n                                       survey = \"acs5\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19013. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19013. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19013. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19013. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19013. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19013. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19113. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19113. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19113. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19113. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19113. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19113. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19202. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19202. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19202. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19202. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19202. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19202. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19051. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19051. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19051. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19051. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19051. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19051. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19055. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2005-2009 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2009 from table B19055. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19055. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2008-2012 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2012 from table B19055. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19055. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2012-2016 5-year ACS\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading ACS5 variables for 2016 from table B19055. To cache this dataset for faster access to ACS tables in the future, run this function with `cache_table = TRUE`. You only need to do this once per ACS dataset.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nGetting data from the 2017-2021 5-year ACS\nGetting data from the 2017-2021 5-year ACS\n```\n:::\n\n```{.r .cell-code}\n      write_csv(acs_table, file = sprintf(\"%s_%s_%s\", table, year, geography))\n```\n:::\n\n\nHowever, even if this didn't completely work, I learned a lot of useful information, such as the \"sprintf\" function that provides placeholders for strings that are named from iterating variables in loop, as well as how to call only necessary elements of a library into a function to prevent using too much memory/slowing run time.\n\n## DSPG Questions\n\nTreat this section as a place to put all of the different questions that team members have about the work they've been completing so far. This can be things like;\n\n-   How to best create a certain plot.\n-   What package/module might be the best fit for the task.\n-   An idea that can be discussed with the larger group for additional thoughts.\n\n## \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}